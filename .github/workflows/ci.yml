name: CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8
    
    - name: Lint with flake8
      run: |
        flake8 --count --select=E9,F63,F7,F82 --show-source --statistics .
        flake8 --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics .
    
    - name: Check formatting with black
      run: black --check --diff .
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  setup-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Test Setup Assistant (Python)
      run: |
        python tools/setup-assistant/setup.py
    
    - name: Test Setup Assistant (PowerShell) - Windows only
      if: runner.os == 'Windows'
      run: |
        powershell -ExecutionPolicy Bypass -File tools/setup-assistant/setup.ps1 -QuickMode
    
    - name: Verify setup completed
      run: |
        python -c "
        import os
        assert os.path.exists('.env'), '.env not created'
        assert os.path.exists('config.yaml'), 'config.yaml not created' 
        assert os.path.exists('data'), 'data directory not created'
        assert os.path.exists('samples'), 'samples directory not created'
        print(' Setup verification passed')
        "

  docs-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation links
      run: |
        # Check for broken internal links
        grep -r "\[.*\](.*\.md)" docs/ || true
        
    - name: Validate markdown
      uses: articulate/actions-markdownlint@v1
      with:
        config: .markdownlint.json
        files: '**/*.md'
        ignore: node_modules
        
  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security check with bandit
      run: |
        pip install bandit
        bandit -r . -x tests/,venv/
